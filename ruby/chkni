#!/usr/bin/env ruby

#
# chkni -- validate NI URIs for file and web object
#
# This is the NI URI library developed as
# part of the SAIL project. (http://sail-project.eu)
#
# Specification(s) - note, versions may change::
# * http://tools.ietf.org/html/farrell-decade-ni
# * http://tools.ietf.org/html/draft-hallambaker-decade-ni-params
#
# Author:: Dirk Kutscher <kutscher@neclab.eu>
# Copyright:: Copyright (c) 2012 Dirk Kutscher <kutscher@neclab.eu>
#
# License:: http://www.apache.org/licenses/LICENSE-2.0.html
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


$: << File.dirname(__FILE__)

require 'ni'
require 'getoptlong'

ni=nil
file=nil
web=nil

def printUsage
  print "Usage: chkni -n <name> -f <filename> -- validate specified name for file\n"
  print "Usage: chkni -n <name> -w <uri> -- validate specified name for web resource\n"
  print "       chkni -h -- print usage info\n"
end

def hashFromFile(file, auth, algo)
  u = URI::NI.buildFromFile(auth, file, nil, algo)
#  u.to_s
  u
end

def hashFromWeb(uri, auth, algo)
  u = URI::NI.buildFromHTTP(auth, URI(uri), nil, algo)
#  u.to_s
  u
end


opts = GetoptLong.new(
  ['--help', '-h', GetoptLong::NO_ARGUMENT ],
  ['--ni', '-n', GetoptLong::REQUIRED_ARGUMENT ],
  ['--file', '-f', GetoptLong::REQUIRED_ARGUMENT ],
  ['--web', '-w', GetoptLong::REQUIRED_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
  when "--help"
    printUsage
    exit 0
  when "--file"
    file=arg
  when "--web"
    web=arg
  when "--ni"
    ni=URI::parse(arg)
  end
end

if (((not file) and (not web)) or (file and web) or (not ni))
  printUsage
  exit -1
else if file
       u=hashFromFile(file, nil, ni.hashAlgo)
     else
       u=hashFromWeb(web, nil, ni.hashAlgo)
     end
  if(u==ni)
    print "good"
    exit 1
  else
    print "bad"
    # print "\ncalculated\n#{u.to_s}, but expected\n#{ni.to_s}\n"
    # print "classes: #{u.class}, #{ni.class}\n"
    exit 0
  end
end



