#!/usr/bin/env ruby

#
# testhttp -- test NetInf HTTP CL
#
# This is the NI URI library developed as
# part of the SAIL project. (http://sail-project.eu)
#
# Specification(s) - note, versions may change::
# * http://tools.ietf.org/html/farrell-decade-ni
# * http://tools.ietf.org/html/draft-hallambaker-decade-ni-params
#
# Author:: Dirk Kutscher <kutscher@neclab.eu>
# Copyright:: Copyright (c) 2012 Dirk Kutscher <kutscher@neclab.eu>
#
# License:: http://www.apache.org/licenses/LICENSE-2.0.html
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$: << File.dirname(__FILE__)

require 'getoptlong'
require 'json'
require 'mail'
require 'httpcl'
require 'routes'
require 'niutils'

loc="village.n4c.eu"            # default next hop
authority="netinf.org"
digestAlgo=:"sha-256"           # default
locs=["netinf.org"]
directory=Dir::pwd

def printUsage
  print "Usage: testhttp -[-l <FQDN>] [-a <authority>] [-d <directory>"
  print "       testhttp -h -- print usage info\n"
end


opts = GetoptLong.new(
                      ['--help', '-h', GetoptLong::NO_ARGUMENT ],
                      ['--loc', '-l', GetoptLong::REQUIRED_ARGUMENT ],
                      ['--authority', '-a', GetoptLong::REQUIRED_ARGUMENT ],
                      ['--dir', '-d', GetoptLong::REQUIRED_ARGUMENT ],
)

opts.each do |opt, arg|
  case opt
  when "--help"
    printUsage
    exit 0
  when "--loc"
    loc=arg
  when "--dir"
    directory=arg
  when "--authority"
    authority=arg
  end
end





msgId=Time.new.strftime("%Y%m%d%H%M%S")
#niUri=URI::parse(ni)

files=[]

print "\nLooking for files in #{directory}...\n"

d = Dir.new(directory)
d.each  {|x| 
  if File::file?(x)
    files.push(x)
  end
}

print files

nhttp=NetInfHTTP.new
names=[]

print "\nRegistering many objects...\n"

files.each {|file|
  niUri=hashFromFile(file, authority, digestAlgo)
  names.push(niUri)
  msgId=Time.new.strftime("%Y%m%d%H%M%S")
  print "registering #{niUri}\n"
  res=nhttp.publishLoc(niUri, locs, loc, msgId)
}

print "Getting many objects...\n"

names.each {|niUri|
  msgId=Time.new.strftime("%Y%m%d%H%M%S")
  obj=nhttp.get(niUri, msgId, loc)
  puts "#{obj.body}\n"
#  puts "Reponse Code: #{obj.code}\n"
#  puts "Headers: #{obj.to_hash.inspect}\n"
}


print "Publishing many objects (full put)...\n"

files.each {|file|
  niUri=hashFromFile(file, authority, digestAlgo)
  msgId=Time.new.strftime("%Y%m%d%H%M%S")
  print "publishing #{niUri}\n"
  res=nhttp.publishObj(niUri, file, loc, msgId)
}


print "Getting many objects...\n"

names.each {|niUri|
  msgId=Time.new.strftime("%Y%m%d%H%M%S")
  obj=nhttp.get(niUri, msgId, loc)
  puts "#{obj.body}\n"
#  puts "Reponse Code: #{obj.code}\n"
#  puts "Headers: #{obj.to_hash.inspect}\n"
}


exit 0

