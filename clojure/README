NI URI creation, parsing and validation in Clojure
==================================================

VERSION: 0.2

This is the NI URI library developed as
part of the SAIL project. (http://sail-project.eu)

Specification(s) - note, versions may change::
* http://tools.ietf.org/html/farrell-decade-ni
* http://tools.ietf.org/html/draft-hallambaker-decade-ni-params

Author:: Dirk Kutscher <kutscher@neclab.eu>
Copyright:: Copyright (c) 2012 Dirk Kutscher <kutscher@neclab.eu>

License:: http://www.apache.org/licenses/LICENSE-2.0.html
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

About
-----

This is a Clojure implementation of the NI name format for Named Data
Objects as develop by the SAIL project.


Dependencies
------------

- org.clojure/data.codec (from clojure.contrib)
- clj-message-digest

tested with lein and clojure-1.4.0


Roadmap
-------

  - src/ni/core.clj: the NI URI implementation in Clojure
  - test/ni/test/core.clj: test drivers
  - project.clj: dependencies list for leiningen (see below)
  - Makefile: for installing dependencies (see below)


Preparing
---------

I am using the leinigen tool
(https://github.com/technomancy/leiningen) for automating dependencies
management. If you have leinigen installed, you can just install the
dependencies with calling 'make deps' (or 'lein deps' directly) on the
command line.

'make' performs "lein clean; lein deps; lein test".


Examples:
---------

parsing:
(ni "ni://example.com/sha-256;abcd?ct=image/jpg")

creation:
(def name1 (mkni "this is the NDO data" "example.com" "sha-256" "ct=text/plain"))
(def name2 (mkni  file "example.com" "sha-256" ""))

validation:
(valid? name2 file)
(valid? name1 "foo")

string transformation:
(ni-toString name1)


Changes:
--------

[2012-05-25]
* fixed a bug in urldecode (added padding)
* fixed a bug in b64urlencode and b64urldecode (string by ByteArray...)
* added basic support for transformation into nih URI format
* added basic support for creating NI URI from NIH URI
* added support for URL fragment representation

[2012-05-28]
* added support for truncated hash suite
* added support for binary representation
* added support for NIH format
* added test cases

[2012-05-24]
* updated to clojure-1.4.0


Thanks:
-------

- Rich Hickey -- for inventing Clojure

- User 'sw1nn' on stackoverflow.com for his hexify/unhexify functions
  (http://stackoverflow.com/questions/10062967/clojures-equivalent-to-pythons-encodehex-and-decodehex)