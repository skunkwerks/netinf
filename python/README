NI URI format implementation in Python

Author:: Elwyn Davies <davieseb@scaa.tcd.ie>/<elwynd@folly.org.uk> 
Specification:: http://tools.ietf.org/html/draft-farrell-decade-ni-00
License:: Apache 2.0 - See LICENSE file.
Copyright (c) 2012 Elwyn Davies, Trinity College Dublin and Folly Consulting Ltd
You can redistribute it and/or modify it under the same terms as Python.

Basic implementation of the the NI URI format. Work in Progress.

Currently the code is for release 2 (version 2.6 or later) of Python.
Support for release 3 will need some conversion work.

Provided with Doxygen compatible documentation strings.  Requires doxypy.py
filter (http://code.foosel.org/doxypy) to create Doygen output.

Requires the Python 'stdnum' library to supply the Luhn-mod-N checkdigit 
algorithm.  Can be downloaded from http://pypi.python.org/pypi/python-stdnum. 

Requires the Python 'PyDNS' module to allow the server to determine a routable
address for the node it is running in from DNS (otherwise it usually gets
the loopback address).  Can be downloaded from 
http://pydns.sourceforge.net/downloads.html.  Install the appropriate version
for the major release of Python you are using.

(In each case the modules can be installed using:
sudo python setup.py install
assuming you have the distutils module installed).

Provides:
- ni.py - library of ni: and nih: URL processing and digest making/checking functions.
- nicl.py - basic command line tool to make and check digests using ni.py.
- niget.py - command line tool to perform NetInf get requests over HTTP
- nipub.py - command line tool to perform NetInf publish requests over HTTP
- ni_urlparse.py - slightly hacked version of urlparse.py supporting ni scheme.
- doit.py - shell script used for checking ni.py and nicl.py

Support functions (acquired from http://atlee.ca/software/poster/index.html):
- encode.py - improved mechanism for constructing multipart/form 
  (extensively modified).
- streaminghttp.py - allows large uploads to be handled without requiring 
  equally large memory buffers by allowing iterables and coping with 
  Python generators (essentially as-is from Poster site).

 Lightweight NI NDO cache server:
 Provides an HTTP server that just serves as the server end of the NetInf
 protocol, manages a local cache of NDOs and provides http: access using
 the .well-known/ni mechanism. It provides the following functions:
 - NetInf GET over HTTP CL (responds to POSTS to /netinfproto/get)
 - NetInf PUBLISH over HTTP CL (responds to POSTS to /netinfproto/publish or .../put)
 - HTTP GET for /.well-known/ni/<alg name>/<digest>
 - HTTP GET for /getputform.html
 - HTTP GET for /showcache.html and /showcache.html?alg=<alg-name>
 - HTTP GET for /favicon.ico (NetInf mini icon displayed in browser URL box)
 Uses the following files:
 - niserver_main.py - the main server controller
 - niserver.py - the guts of the server
 - niserver.conf - main configuration file - specifies locations for logs, cache
 - niserver_log.conf - configuration file for Python logging system for server

-  

Features
 - uses Python hashlib (ultimately dependent on OpenSSL) and base64
 - use Python urllib and mimetypes to do HTTP access
 - uses Python stdnum.luhn module to create check digit for nih: names
 - can hash memory objects (strings), files, and web objects
 - supports hash function pluggability

Limitations
 - niget should work on chunks of request rather than whole file

CHANGES
  2012-09-14
  	- Updated niserver to send back JSON encoded metadata and status.
  2012-06-01
  	- Updated ni.py, nicl.py and ni_urlparse.py to match Version 06
	  of draft-farrell-farrell-decade-ni. Adds the nih: scheme and 
	  the binary name format.
	- Improved the format checking when validating name in NIname.
	- Added redirection to server when using .well-known to
	  conform to standards for .well-known usage (not too much data).
	- NOTE: Work still in progress on server and HTTP convergence 
	  layer commands (niget.py and nipub.py).
  2012-02-01
	- Improved documentation comments in ni.py and nicl.py
	- added niget.py to provide NetInf 'get' functionality over HTTP
  2012-01-31
	- major rewrite - encapsulated URL validation in NIname class
	- uses hacked version of standard Python urlparse (ni_urlparse.py)
	- Doxygen documentation (via doxypy.py) completed

  2012-01-23
        - added command line tool nicl.py to generate and verify ni: URLs
        - added testing script doit.py

  2012-01-21
	- basic functions in ni.py to parse ni: URL templates and add/check
	  digest as params
