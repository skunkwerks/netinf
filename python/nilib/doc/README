NI URI format implementation in Python
======================================

Author:: Elwyn Davies <davieseb@scaa.tcd.ie>/<elwynd@folly.org.uk> 
Specification:: http://tools.ietf.org/html/draft-farrell-decade-ni-00
License:: Apache 2.0 - See LICENSE file.
Copyright (c) 2012 Elwyn Davies, Trinity College Dublin and Folly Consulting Ltd
You can redistribute it and/or modify it under the same terms as Python.

Basic implementation of the the NI URI format. Work in Progress.

The specifications that this is based on - note, versions may change:
          - http://tools.ietf.org/html/draft-farrell-decade-ni-10
          - http://tools.ietf.org/html/draft-hallambaker-decade-ni-params-03
          - http://tools.ietf.org/html/draft-kutscher-icnrg-netinf-proto-00

Currently the code is for release 2 (version 2.6 or later) of Python.
Support for release 3 will need some conversion work.

Provided with Doxygen compatible documentation strings.  Requires doxypy.py
filter (http://code.foosel.org/doxypy) to create Doygen output.

Requires the Python 'stdnum' library to supply the Luhn-mod-N checkdigit 
algorithm.  Can be downloaded from http://pypi.python.org/pypi/python-stdnum. 

Requires the Python 'PyDNS' module to allow the server to determine a routable
address for the node it is running in from DNS (otherwise it usually gets
the loopback address).  Can be downloaded from 
http://pydns.sourceforge.net/downloads.html.  Install the appropriate version
for the major release of Python you are using.

Requires the Python 'python-magic' module (version 0.4.3 or later) to determine 
the content type of files that are to be published. Note that the version of
the magic module that is distributed with Ubuntu is out of date and does not
provide the function used.  The latest version can be downloaded from
http://pypi.python.org/pypi/python-magic/.

Requires the Python 'redis-py' module (version 2.7.1 or later) to provide an
interface to the Redis database package if the NRS server capabilities are
configured in the niserver.  This module can be downloaded from
https://github.com/andymccurdy/redis-py/.

Requires the Python 'qrcode' module (version 2.4.2 or later) to provide the
capability to output QRcode images.  This module can be downloaded from
https://github.com/lincolnloop/python-qrcode/

Requires the Python Imaging Library ('pil') module (version 1.1.7 or later)
to provide support for the QR code images.  This module can be downloaded
from 
http://www.pythonware.com/products/pil/

(In each case the modules can be installed using:
sudo python setup.py install
assuming you have the distutils module installed).

They are also all in the PyPi repository and the Python setup checks that they
have been installed, and installs them for you if they are missing. They can
be individually installed using 
sudo pip install <modulename>

Provides:

Command line utilities:
- nicl.py -         basic command line tool to make and check digests using ni.py.
- niget.py -        command line tool to perform NetInf get requests over HTTP.
- nipub.py -        command line tool to perform NetInf publish requests over HTTP.
- nisearch.py -     command line tool to perform NetInf search requests over HTTP.
- pynilib_test.sh - shell script used for checking ni.py and nicl.py.

Lightweight NI NDO cache server:
================================
     
 Provides an HTTP server that just serves as the server end of the NetInf
 protocol, manages a local cache of NDOs and provides http: access using
 the .well-known/ni mechanism. It provides the following functions:
 - NetInf GET over HTTP CL (responds to POSTs to /netinfproto/get)
 - NetInf PUBLISH over HTTP CL (responds to POSTs to /netinfproto/publish or .../put)
 - NetInf SEARCH over HTTP CL (responds to POSTs to /netinfproto/search)
 - HTTP GET for /.well-known/ni/<alg name>/<digest>
 - HTTP GET for /getputform.html
 - HTTP GET for /netinfproto/list and /netinfproto/list?showcache.html?alg=<alg-name>
 - HTTP GET for /favicon.ico (NetInf mini icon displayed in browser URL box)

The server can be configured to provide Name Resolution Services (NRS):
 - Add an NRS database entry (responds on POSTs on /netinfproto/nrsconf)
 - Lookup an NRS database entry (responds on POSTs on /netinfproto/nrslookup)
 - Delete an NRS database entry (responds on POSTs on /netinfproto/nrsdelete)
 - Examine available NRS database entries (responds on POSTs on /netinfproto/nrsvals)

The server uses the standard Python BaseHTTPHandler paradigm with threading and
various improvements to the handler to allow streaming of input and output 
between the handler and the socket server.  The handler has been made generic 
so that it can be used both with this server and also with WSGI based servers
(see below).  An adaptor shim (httpshim.py) is provided to link the generic
handler and the HTTP server class.

Uses the following files:
 - niserver_main.py - the main server controller
 - niserver.py - the guts of the server
 - nihandler.py - the request handler with the bulk of the NetInf specific code
 - httpshim.py - shim that links the generic NIHTTPHandler class in nihandler
                 to the BaseHTTPHandler derived code needed by niserver.py
 - netinf_ver.py - version strings
 - niserver.conf - main configuration file - specifies locations for logs, cache
 - niserver_log.conf - configuration file for Python logging system for server

Also:
 - niserver_stop.py - command line utility to stop the server (only from the
   same host as it was started on)

Support modules:
- ni.py -          library of ni: and nih: URL processing and digest
                   making/checking functions.
- ni_urlparse.py - slightly hacked version of urlparse.py supporting ni scheme.

Support modules (acquired from http://atlee.ca/software/poster/index.html):
- encode.py - improved mechanism for constructing multipart/form 
              (extensively modified).
- streaminghttp.py - allows large uploads to be handled without requiring 
               equally large memory buffers by allowing iterables and coping
               with Python generators (essentially as-is from Poster site).

WSGI Test Server
================
The same NetInf functionality as with the server based on BaseHTTPServer can
be obtained using a WSGI-based server (see http://www.python.org/peps/pep-0333/)
using the standard Python wsgiref modules.

This server is only single threaded and is configured using environment
variables rather than a configuration file.  As such it is more useful for
testing improvements to the handler rather than a production system.  The 
server is also easier to start and stop than the BaseHTTPServer version.
Also logging goes to standard error (stderr) rather than a specified log
file.

Exactly the same main handler is used but an alternative shim (wsgishim.py)
provides the necessary adaptation for the WSGI interface. 

Uses the following files:
 - niwsgiserver.py - the server controller
 - nihandler.py - the request handler with the bulk of the NetInf specific code
 - wsgishim.py - shim that links the generic NIHTTPHandler class in nihandler
                 to the WSGI interface needed by niswsgierver.py
 - netinf_ver.py - version strings

Apache WSGI mod_wsgi script:
============================

The NetInf functionality can also be integrated into the Apache 2 web server
using mod_wsgi.  In this case the configuration is handled via Apache
SetEnv commands (see netinf.wsgi). Logging goes to the Apache error log.  

Uses the following files:
 - netinf.wsgi - has the 'application' function called by mod_wsgi for each 
                 request.
 - nihandler.py - the request handler with the bulk of the NetInf specific code
 - wsgishim.py - shim that links the generic NIHTTPHandler class in nihandler
                 to the WSGI interface needed by niswsgierver.py
 - netinf_ver.py - version strings

Installation and support files:
 - install_netinf_wsgi - sets up the Apache 2 with mod_wsgi to run the niserver
 - test.wsgi - "Hello World" WSGI application for checking mod_wsgi installation.
 - showenv.wsgi - Simple WSGI application to show the environ dictionary supplied
                  to the application to allow checking of configuration for NETINF.

--------------------------------------------------------------------------------
INSTALLATION
============

This code runs with Python v2.6 or v2.7.  It should also run with v2.5
but this has not been tested.  It is not ready for Python v3.

The Python nilib is setup to use the Python setuptools to install the code.
From the Python subdirectory issue:
    sudo python setup.py install

By default it will install into /usr/local/bin for various scripts, e.g.,
/usr/local/lib/python2.7/dist-packages/nilib-1.0-py2.7.egg for the Python
code and /var/niserver for the configuration files, HTML code and icon file.

The destination for the configuration files, etc., can be altered by 
setting the environment variable NILIB_DATA_DIR to the alternative root
directory path before running the python installation.

This requires the Python distribute system to be installed. See
http://packages.python.org/distribute/setuptools.html

It is quite likely that this is installed as standard.  Note that it is not the
original distutils package, but the enhanced package.  Extra facilities are
used to create the scripts that invoke the command line tools automatically
while leaving the source code in .py files in the nilib distribution.

Run the script 'python/nilib/scripts/install_netinf_wsgi.sh' to setup 
an Apache 2 web server to use the code to server an NDO cache through an
Apache 2 virtual host.  The Apache 2 server and the WSGI module mod_wsgi
need to be pre-installed.  On Ubuntu there are apt packages available
for both of these.

There are two test apps installed by default - accessed from 
http://<netloc>/testapp and http://<netloc>/showenv.  These are intended
to be helpful in checking out a new mod_wsgi installation.  They are not
dependent on the rest of the nilib code in any way. One is a 'Hello World'
displayer and the other prints the environ dictionary passed to the app
by mod_wsgi.  This allows you to check you have the NETINF environment 
variables set correctly.

The default insatllation is optimized so that the fixed forms etc are 
delivered as statuc files although the netinf.wsgi application would
also deliver them.

The first thing to do once you are happy the installation is correct
is to access the URL http://<netloc>/checkcache.  This actually sets up
the cache directory structure when running with mod_wsgi.  This is done
to avoid having to call the directory checking code for every request
which would be somewhat slow. It can be run again at any time to check 
the cache is still as expected.  It ought to check all the entries
are compatible with the current code, but that is for another day.

NOTES
=====
- The directory structure of the NDO cache has changed from versions prior
  to October 2012. It will be necessary to delete any existing cache and
  allow the server to recreate the directory structure.
- The metadata structure in the metadata files is incompatible with earlier
  versions of the server.  The server now checks that the 'NetInf' field
  in the metadata is consistent with the NETINF_VER string written into the
  server code. Please delete older cache entries before strating to use the
  current version. When the metadata structure has stabilized, a backwards
  compatibility mechanism may be provided.

--------------------------------------------------------------------------------
RUNNING AN INSTALLED VERSION
============================

During installation scripts are created to run the various command line tools
and the niserver startup script.  These are:
- pyniserver     - runs niserver_main.py - starts BaseHTTPServer niserver
- pystopniserver - runs niserver_stop.py - stops niserver
- pyniwsgiserver - runs niwsgiserver.py - starts WSGI niserver (stop with Ctrl/C)
- pynicl         - runs nicl.py - command line to generate and validate digests
- pyniget        - runs niget.py - command line to send NetInf GET message
- pynipub        - runs nipub.py - command line to send NetInf PUBLISH message
- pynisearch     - runs nisearch.py - command line to send NetInf SEARCH message

The command line scripts (except pystopniserver which only does one thing)
all have --help/-h options which will provide explanations of all the available
options.

--------------------------------------------------------------------------------
Features
 - uses Python hashlib (ultimately dependent on OpenSSL) and base64
 - use Python urllib, urllib2 and mimetypes to do HTTP access
 - uses Python stdnum.luhn module to create check digit for nih: names
 - can hash memory objects (strings), files, and web objects
 - supports hash function pluggability

Limitations
 - niget should generate digest as it reads the content if possible rather
   than reading it into a buffer (problem with very large objects)
 - (more difficult) generate digest on the fly in server when uploading
   file on publishing - may conflict with generating ni name on the fly at
   client end (there is a solution by adding algorithm name to
   content-disposition header for form data item with file.
               
CHANGES
  2012-11-22
        - Modified to allow handler code to work with either BaseHTTPServer
          or WSGI-based servers, including Apache 2 mopd_wsgi.  Separated
          out main handler code from niserver.py into nihandler.py.
          Added alternative shims httpshim.py and wsgishim.py that
          provided the interface to BaseHTTPHandler and WSGI respectively.
  2012-10-13
        - Reorganized to work with Python distribute/setuputils.
          Added notes for installation and installed scripts.
  2012-10-12
        - Implemented initial version of NRS server using Redis database.
          Updated cachelisting implementation to allow access to metadata.
          General cleanup of and refactoring of niserver.py code
          Addition/completion of Doxygen/doxypy documentation.
          Fixed up niserver testing code.InteractiveConsole
  2012-10-01
	- Added handling of metadata string supplied by PUBLISH to niserver
	  and nipub.  Updated nipub to specify format of response (rform) 
          and  niserver to handle the response format.  The PUBLISH response
          now contains a single MIME part of a type that depends on the requested
	  response (JSON, HTML or plain text).  nipub can print out the response;
	  if it is JSON it can be printed either raw or prettily formatted.
	  Allowed nipub to publish metadata alone or combination of metadata and 
	  content.  
  2012-09-17
        - Completed implementation of addition of storing and returning
          metadata in niserver, nipub and niget.  Current implementation
          now allows publication of both complete NDOs (content and metadata)
          and also metadata alone.  The metadata can be updated when 
          repeated publication attempts are made - this just adds additional
          locators.  The GET function will now return just the metadata if
          that is all that is available or both when both are available.
          The response from a (successful) PUBLISH is now a three part
          MIME multipart/mixed object.  The first part is a subset of the 
          JSON encoded metadata (the list of locators) plus the msgid and the 
          status of the report; the second is a text/plain report of what 
          was done and the third part is an equivalent report in text/html
          format.  When the publication is made form a web browser, the HTML
          format will normally be displayed.  A command line application can
          use the text/plain version.  The response from GET is now either a
          single part application/json response if the cache only holds the 
          metadata or a two part multipart/mixed object with the JSON encoded
          complete metadata plus msgid and status in the first part and the 
          actual content in the second part.
  2012-09-14
  	- Updated niserver to send back JSON encoded metadata and status.
  2012-06-01
  	- Updated ni.py, nicl.py and ni_urlparse.py to match Version 06
	  of draft-farrell-farrell-decade-ni. Adds the nih: scheme and 
	  the binary name format.
	- Improved the format checking when validating name in NIname.
	- Added redirection to server when using .well-known to
	  conform to standards for .well-known usage (not too much data).
	- NOTE: Work still in progress on server and HTTP convergence 
	  layer commands (niget.py and nipub.py).
  2012-02-01
	- Improved documentation comments in ni.py and nicl.py
	- added niget.py to provide NetInf 'get' functionality over HTTP
  2012-01-31
	- major rewrite - encapsulated URL validation in NIname class
	- uses hacked version of standard Python urlparse (ni_urlparse.py)
	- Doxygen documentation (via doxypy.py) completed

  2012-01-23
        - added command line tool nicl.py to generate and verify ni: URLs
        - added testing script doit.py

  2012-01-21
	- basic functions in ni.py to parse ni: URL templates and add/check
	  digest as params
