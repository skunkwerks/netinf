


Network Working Group                                        D. Kutscher
Internet-Draft                                               C. Imbrenda
Intended status: Standards Track                                     NEC
Expires: May 12, 2012                                         S. Farrell
                                                               E. Davies
                                                  Trinity College Dublin
                                                            C. Dannewitz
                                                  Universitaet Paderborn
                                                        November 9, 2011


                          The NetInf Protocol
                         draft-netinf-proto-00

Abstract

   This document defines a conceptual protocol and corresponding node
   requirements for NetInf nodes in a NetInf network.  NetInf nodes can
   provide different services to other NetInf nodes, e.g., forwarding
   requests for information objects, delivering corresponding response
   messages, name resolution services etc.  This (abstract) protocol is
   intended to be run over some "convergence layer" that handles
   transport issues.  A "wire" format is not (yet) provided.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 12, 2012.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Kutscher, et al.          Expires May 12, 2012                  [Page 1]

Internet-Draft               NetInf Protocol               November 2011


   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Principles and Assumptions . . . . . . . . . . . . . . . . . .  3
   3.  Convergence Layer Architecture . . . . . . . . . . . . . . . .  4
   4.  The NetInf Protocol - Overview . . . . . . . . . . . . . . . .  5
   5.  Protocol Details . . . . . . . . . . . . . . . . . . . . . . .  7
     5.1.  GET/GET-RESP . . . . . . . . . . . . . . . . . . . . . . .  7
     5.2.  PUBLISH/PUBLISH-RESP . . . . . . . . . . . . . . . . . . .  8
     5.3.  SEARCH/SEARCH-RESP . . . . . . . . . . . . . . . . . . . .  9
   6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 10
   7.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 10
   8.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 10
     8.1.  Normative References . . . . . . . . . . . . . . . . . . . 10
     8.2.  Informative References . . . . . . . . . . . . . . . . . . 11
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 11





























Kutscher, et al.          Expires May 12, 2012                  [Page 2]

Internet-Draft               NetInf Protocol               November 2011


1.  Introduction

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119.  [RFC2119]

   Syntax definitions in this memo are specified according to ABNF
   [RFC5234].


2.  Principles and Assumptions

   In order to support interoperable implementation of the NetInf
   design, [ref.netinf-design] the following assumptions are made here:

      all nodes can take on all NetInf roles (but do not have to);

      as necessary, nodes may access a Name Resolution System (NRS)
      and/or a (possibly name based) message routing infrastructure for
      Netinf messages; and

      the NetInf protocol can be used directly to access content.

   The Netinf protocol operates on Named Data Objects (see
   [ref.netinf-design]) referred to as NDOs or just DOs.  An NDO is an
   ordered collection of octets associated with a name.  The Netinf
   protocol is designed to cache, locate and transmit complete NDOs.

   The Netinf protocol is specified so that NDOs can in principle be
   retrieved from nodes anywhere in the network to which messages can be
   routed.  This routing is intended to be driven by the names of the
   NDOs, with the option to use NRS, but this specification does not
   discuss how routing nor calling to an NRS is carried out.  Routing
   will also depend on the underlying Convergence Layer protocol (see
   Section 3) in use at that node.

   Nodes offering Netinf services may return locators in some cases, but
   locators may not be usable outside of some (possibly hard-to-
   characterise) domain, or for more than a limited period of time, due
   to mobility of nodes or time limited access through 'pinholes' in
   middleboxes such as firewalls and Network Address Translators (NATs).
   Accordingly, a design goal is to enable preferential use of names,
   with locators mostly as hints to improve efficiency.  For this reason
   one can argue that locators should not be made available to
   applications using the Netinf protocol in a form that would allow
   them to try to use the locator outside the Netinf protocol.  NDOs may
   have multiple locators in order to indicate specific interfaces or to
   reflect attachment to multiple addressing domains.  Locators also



Kutscher, et al.          Expires May 12, 2012                  [Page 3]

Internet-Draft               NetInf Protocol               November 2011


   typically map to a specific instance (copy) of an NDO residing at a
   given host.

   The following NetInf services are assumed to be implemented on nodes
   through the Netinf protocol:

      caching of NDOs, both locally originated and acquired through
      network operations with the Netinf protocol;

      requesting the fetching of an NDO using its name, possibly with
      the addition of a locator, from elsewhere in the network;

      responding to Netinf protocol NDO fetch operations using a name
      referring to one of its locally cached NDOs by returning either or
      both of the data named in the operation or locator(s) referring to
      a node where that NDO is (assumed to be) available;

      initiating a search for NDOs matching specified search criteria;

      responding to search requests received by determining if any
      locally cached NDOs meet the search criteria according to locally
      determined algorithms;

      NDO publication via sending out the name and, optionally, the
      associated data to other nodes;

      according to locally determined policy, the ability to accept or
      reject NDO publication requests that are delivered to the node,
      and to cache those that are accepted;

      according to locally determined policy, after carrying out local
      processing, the ability to forward Netinf messages to other nodes
      or discard them.

      local cache management, driven by local policy and (optionally)
      whatever cache directives are carried in NetInf messages


3.  Convergence Layer Architecture

   The idea of the Convergence Layer is to provide a means to transport
   NetInf messages between pairs of nodes that offer Netinf services.
   Any protocol that allows NetInf messages to be passed without loss of
   information can be used as a Convergence Layer protocol.

   This document does not cover the bit-level specification of any
   Convergence Layer protocol.  The individual Convergence Layer
   protocols will provide their own specification regarding their bit-



Kutscher, et al.          Expires May 12, 2012                  [Page 4]

Internet-Draft               NetInf Protocol               November 2011


   level format.

   Different Convergence Layers can be used in the various regions
   forming a global Netinf network.  Where a message has to pass through
   several intermediate nodes from source to destination, the Netinf
   protocol layer at each node is responsible for selecting the
   appropriate link and Convergence Layer to forward messages.

   Each Convergence Layer has to offer the following minimal set of
   capabilities:

   o  unidirectional point-to-point transport of Netinf messages from
      source to destination,

   o  preservation of message boundaries,

   o  reliable transmission of message octets, and

   o  in-order delivery of message octets to the destination node.

   If an underlying protocol used by a particular Convergence Layer
   cannot offer these capabilities natively, then the Convergence Layer
   is responsible for synthesising these capabilities by appropriate
   means, e.g., use of retransmission or insertion of sequence numbers.
   However, this does not prevent a Convergence Layer that uses a more
   capable underlying protocol from implementing additional
   capabilities, e.g., bidirectional connections.

   The Convergence Layer itself does not specify the properties of the
   messages, how they are interpreted, and the way nodes should interact
   with them, as that is what is specified in the present document.

   The Convergence Layer architecture is inspired by, and similar to,
   the concept used in Delay-Tolerant Networking.  [RFC4838][RFC5050].


4.  The NetInf Protocol - Overview

   This protocol assumes that NDOs are named using URIs, and in
   particular via the "ni" URI scheme [I-D.farrell-decade-ni] which MUST
   be supported.  There are a set of extensions to the "ni" URI scheme
   [I-D.hallambaker-decade-ni-params] that MAY be supported by nodes.
   However, other URI forms MAY also be used in the NetInf protocol, in
   particular as locators, and nodes SHOULD support at least fetching of
   "http" URLs.

   Nodes are assumed to be capable of discriminating between names and
   locators, based on the URI scheme or otherwise.



Kutscher, et al.          Expires May 12, 2012                  [Page 5]

Internet-Draft               NetInf Protocol               November 2011


   The most common operations for a NetInf node will be fetching (using
   a GET message) an NDO or responding to such queries.  The response to
   the GET message SHOULD contain the octets making up the specified NDO
   and MAY contain one or more URIs (typically locators) that could
   subsequently be used to retrieve the octets of the NDO either via
   this Netinf protocol or by alternative, locator-specific, means.
   There are some circumstances in which it MAY be appropriate for the
   response to the GET message to contain only one or more locators.

   GET, PUBLISH and SEARCH messages MAY be forwarded by any node that
   receives them if there is good reason and local policy indicates that
   this would not result in excessive usage of network resources.

   Since this specification does not determine how message routing, nor
   use of an NRS is done, we do not specify how or when messages are to
   be forwarded.

   Nodes that want to make a locally stored NDO available with a
   specific name can use the PUBLISH message to announce that data to
   the network.  This message MAY "push" the octets of the NDO into
   other nodes' caches.  (If those nodes are willing to take them.)  The
   reasoning behind this is that in many circumstances pushing just a
   name or a locator will not be helpful because the node with the NDO
   may be located behind a middlebox that will not allow access to the
   data from "outside."  Pushing the complete NDO to a node that is
   accessible from the originating node but is also accessible from
   outside the middlebox "interior," can allow global access, e.g., by
   caching the NDO on a server in the DMZ ("DeMilitarized Zone") of an
   enterprise network or in a server provided by a home user's
   ISP.(Internet Service Provider).

   As in the case of routing messages generally, this specification does
   not determine the node(s) to which an NDO can be "pushed."

   Finally, NetInf nodes can send a SEARCH message to other NetInf
   nodes.  In response, a NetInf node can perform a local search (i.e.,
   of its local cache) As a response, any of the NetInf nodes that
   receives the SEARCH message returns a set of "ni" URIs of objects
   matching the search query.  It may also return other types of URI
   such as "http" URIs.  Searching of a node's local cache is the main
   goal for the SEARCH operation, but if a set of nodes were to forward
   SEARCH messages, then as a global search (e.g., a Google-like
   service) service could be offered.

   NDOs together with any associated metadata are represented using MIME
   objects.  [RFC2045].  Placing as much of the metadata linked to the
   NDO in a multipart MIME object along with the octets of the actual
   object allows for significant specification and code re-use.  For



Kutscher, et al.          Expires May 12, 2012                  [Page 6]

Internet-Draft               NetInf Protocol               November 2011


   example, we do not need to invent a new typing scheme nor any
   associated registration rules nor registries.

   As an example we might have a MIME object of that is multipart/mixed
   and contains image/jpeg and application/json body parts, with the
   named image in the former and loosely structured meta-data in the
   latter.  The "ni" scheme parameters draft discusses such examples.
   This means that verification of name-data integrity supported by the
   ni name scheme also depend on the MIME type(s) used.

   MIME also simplifies the specification of schemes that make use of
   digital signatures, reusing techniques from existing systems
   including Secure MIME (S/MIME) [RFC5751]and the Cryptographic Message
   Syntax (CMS) [RFC5652].

   We will probably also want to use base64 encoding [RFC4648] of some
   binary values in the same way as is done within "ni" names.
   [I-D.farrell-decade-ni]


5.  Protocol Details

   We define the GET, PUBLISH and SEARCH messages in line with the
   above.  GET and PUBSLISH MUST be supported.  SEARCH SHOULD be
   supported.  Each message has an associated response.

5.1.  GET/GET-RESP

   The GET message is used to request an NDO from the NetInf network.  A
   node responding to the GET message would send a GET-RESP that is
   linked to the GET request using the msg-id from the GET message as
   the msg-id for corresponding GET-RESP messages if it has an instance
   of the requested NDO.

   The "ni" form or URI MUST be supported.  Other forms of URI MAY be
   supported.

   The msg-id SHOULD be chosen so as to be highly unlikely to collide
   with any other msg-id and MUST NOT contain information that might be
   personally identifying, e.g., an IP address or username.  A
   sufficiently long random string SHOULD be used for this.

   The ext field is to handle future extensility (e.g. for message
   authenticators) and allows for the inclusion of a sequence of type,
   length value tuples.  No extensions are defined at this point in
   time.





Kutscher, et al.          Expires May 12, 2012                  [Page 7]

Internet-Draft               NetInf Protocol               November 2011


   get-req = GET msg-id URI [ ext ]
   get-resp =  status msg-id [ 1*URI ] [ object ]  [ ext ]

   ext = 1*(type length value)


                   Figure 1: GET/GET-RESP Message Format

   Any node that receives a GET message and does not have an instance of
   the NDO referenced in the message MUST reply with an appropriate
   status code and the msg-id from the GET message as the response
   msg-id.  Otherwise, the response MAY contain zero or more URIs that
   MUST be either locators for the specified object or else alternative
   names for that object.  If the receiving node has a copy of the
   relevant object in its cache it SHOULD include the object in the
   response.  Possible reasons for not including the object would
   include situations where the GET message was received via a low-
   bandwidth interface but where the node "knows" that returning a
   locator will allow the requester faster access to the object octets.

   The object MUST be encoded as a MIME object.  If there is metadata
   associated with the object this MUST also be encoded using MIME and
   integrated with the object in a multipart/mixed MIME object.

   If the receiving node does not have a cached copy of the object it
   MAY choose to forward the message depending on local policy.  Such
   forwarding could be based on name-based routing, on an NRS lookup or
   other mechanisms (e.g. a node might have a default route).

   If an get-resp is received with an object that is not MIME encoded or
   of an unknown MIME type then that MUST be treated as an application/
   octet-stream for the purposes of name-data integrity.

   get-resp messages MAY include extensions as with all others.

5.2.  PUBLISH/PUBLISH-RESP

   The PUBLISH message allows a node to push the name, and optionally, a
   copy of the object octets and/or object meta-data.  Ignoring
   extensions, only a status code is expected in return.

   A msg-id MUST be included as in a GET message.

   A URI containing a name MUST be included.  The "ni" URI scheme SHOULD
   be used for this name.

   The object octets MAY be included.  This is intended to handle the
   case where the publishing node is not able to receive GET messages



Kutscher, et al.          Expires May 12, 2012                  [Page 8]

Internet-Draft               NetInf Protocol               November 2011


   for objects.  An implementation SHOULD test (or "know") its local
   network context sufficiently well to decide if the object octets
   ought to be included or not.  Methods for checking this are out of
   scope of this specification.

   In some cases it may make sense for a (contactable) node to only
   publish the name and meta-data about the object.  The idea here is
   that the meta-data could help with routing or name resolution or
   search.  Since we are representing both NDO octets and meta-data as
   MIME objects, we need to tell the receiver of the PUBLISH message
   whether or not that message contains the full object.  We do this via
   the "full-ndo-flag" which, if present, indicates that the PUBLISH
   message contains enough data so the receiver of the PUBLISH message
   has sufficient data to answer a subsequent GET message for that name.

   Extensions ("ext") MAY be included as in a GET request.


   pub-req = PUBLISH msg-id URI [ [ full-ndo-flag ] object ] [ ext ]
   pub-resp = status msg-id [ ext ]


               Figure 2: PUBLISH/PUBLISH-RESP Message Format

   The response to a PUBLISH message is a status code and the msg-id
   from the PUBLISH message and optional extensions.

5.3.  SEARCH/SEARCH-RESP

   The SEARCH message allows the requestor to send a set of query tokens
   containing search keywords.  The response is either a status code or
   a multipart MIME object containing a set of meta-data body parts,
   each of which MUST include a name for an NDO that is considered to
   match the query keywords.


   search-req = SEARCH msg-id [ 1*token ] [ ext ]
   search-resp = status msg-id [ object ] [ ext ]


                Figure 3: SEARCH/SEARCH-RESP Message Format

   In the case where the response contains an object that SHOULD take
   the form of an multipart MIME object where each body part is an
   application/json object, containing a "name" field with a URI as the
   value of that field.  The other fields in each application/json
   object SHOULD contain meta-data that is intended to allow the
   requestor to select which, if any, of the names offered to retrieve.



Kutscher, et al.          Expires May 12, 2012                  [Page 9]

Internet-Draft               NetInf Protocol               November 2011


   The URIs included in a search-resp SHOULD be names, but MAY be
   locators, to be distinguished by the requestor as in the case of GET
   responses.

   The intent of the SEARCH message is to allow nodes to search one
   another's caches, but without requiring us to fix the details
   (ontology) for NDO meta-data.  While this main intended use-case does
   not involve forwarding of SEARCH messsages that is not precluded.

   SEARCH messages MAY include extensions as for other messages.


6.  Security Considerations

   For privacy preserving reasons requestors SHOULD attempt to limit the
   personally identifying information (PII) included with search
   requests.  Including fine-grained search keywords can expose
   requestor PII.  For this reason, we RECOMMEND that requestors include
   more coarse grained keywords and that responders include sufficient
   meta-data to allow the requestor to refine their search based on the
   meta-data in the response.

   Similarly, search responders SHOULD consider whether or not they
   respond to all or some search requests as exposing one's cached
   content can also be a form of PII if the cached content is generated
   at the behest of the responder.

   Name-data integrity validation details are TBD for some common MIME
   types.


7.  Acknowledgements

   This work has been supported by the EU FP7 project SAIL.


8.  References

8.1.  Normative References

   [I-D.farrell-decade-ni]
              Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B., and
              P. Hallam-Baker, "The Named Information (ni) URI Scheme:
              Core Syntax", draft-farrell-decade-ni-00 (work in
              progress), October 2011.

   [I-D.hallambaker-decade-ni-params]
              Hallam-Baker, P., Stradling, R., Farrell, S., Kutscher,



Kutscher, et al.          Expires May 12, 2012                 [Page 10]

Internet-Draft               NetInf Protocol               November 2011


              D., and B. Ohlman, "The Named Information (ni) URI Scheme:
              Parameters", draft-hallambaker-decade-ni-params-00 (work
              in progress), October 2011.

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, November 1996.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, October 2006.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, September 2009.

8.2.  Informative References

   [RFC4838]  Cerf, V., Burleigh, S., Hooke, A., Torgerson, L., Durst,
              R., Scott, K., Fall, K., and H. Weiss, "Delay-Tolerant
              Networking Architecture", RFC 4838, April 2007.

   [RFC5050]  Scott, K. and S. Burleigh, "Bundle Protocol
              Specification", RFC 5050, November 2007.

   [RFC5751]  Ramsdell, B. and S. Turner, "Secure/Multipurpose Internet
              Mail Extensions (S/MIME) Version 3.2 Message
              Specification", RFC 5751, January 2010.

   [ref.netinf-design]
              Ahlgren, B., D'Ambrosio, M., Dannewitz, C., Marchisio, M.,
              Marsh, I., Ohlman, B., Pentikousis, K., Rembarz, R.,
              Strandberg, O., and V. Vercellone, "Design Considerations
              for a Network of Information", Re-Arch 2008 Workshop ,
              December 2008.












Kutscher, et al.          Expires May 12, 2012                 [Page 11]

Internet-Draft               NetInf Protocol               November 2011


Authors' Addresses

   Dirk Kutscher
   NEC
   Kurfuersten-Anlage 36
   Heidelberg,
   Germany

   Phone:
   Email: kutscher@neclab.eu


   Claudio Imbrenda
   NEC
   Kurfuersten-Anlage 36
   Heidelberg,
   Germany

   Phone:
   Email: Claudio.Imbrenda@neclab.eu


   Stephen Farrell
   Trinity College Dublin
   Dublin,   2
   Ireland

   Phone: +353-1-896-2354
   Email: stephen.farrell@cs.tcd.ie


   Elwyn Davies
   Trinity College Dublin
   Dublin,   2
   Ireland

   Phone: +44 1353 624 579
   Fax:
   Email: davieseb@scss.tcd.ie
   URI:











Kutscher, et al.          Expires May 12, 2012                 [Page 12]

Internet-Draft               NetInf Protocol               November 2011


   Christian Dannewitz
   Universitaet Paderborn
   Pohlweg 47-49
   Paderborn,
   Germany

   Phone:
   Email: cdannewitz@upb.de











































Kutscher, et al.          Expires May 12, 2012                 [Page 13]

